{
  "contract_name": "chihuahua-nft-marketplace",
  "contract_version": "0.0.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "accepted_ibc_denominations",
      "accepted_nft_code_ids",
      "contract_owner",
      "marketplace_listing_fee_denom",
      "marketplace_listing_fee_value",
      "marketplace_pct_fees_decimal_string",
      "oracle_contract_address",
      "reward_system"
    ],
    "properties": {
      "accepted_ibc_denominations": {
        "$ref": "#/definitions/AcceptedDenominations"
      },
      "accepted_nft_code_ids": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/NftContractInfo"
        }
      },
      "contract_owner": {
        "type": "string"
      },
      "marketplace_listing_fee_denom": {
        "type": "string"
      },
      "marketplace_listing_fee_value": {
        "$ref": "#/definitions/Uint128"
      },
      "marketplace_pct_fees_decimal_string": {
        "type": "string"
      },
      "oracle_contract_address": {
        "type": "string"
      },
      "reward_system": {
        "$ref": "#/definitions/RewardSystem"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "AcceptedDenominations": {
        "type": "object",
        "required": [
          "list_of_denoms"
        ],
        "properties": {
          "list_of_denoms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "NftContractInfo": {
        "type": "object",
        "required": [
          "code_id",
          "nft_contract_type"
        ],
        "properties": {
          "code_id": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "nft_contract_type": {
            "$ref": "#/definitions/NftContractType"
          }
        },
        "additionalProperties": false
      },
      "NftContractType": {
        "type": "string",
        "enum": [
          "cw2981_multi_royalties",
          "cw721_on_chain_metadata",
          "cw2981_mad_huahua",
          "marketplace_info"
        ]
      },
      "RewardSystem": {
        "type": "object",
        "required": [
          "reward_token_address",
          "reward_token_per_1usdc_volume",
          "total_reward_tokens_distributed",
          "vip_perks"
        ],
        "properties": {
          "reward_token_address": {
            "type": "string"
          },
          "reward_token_per_1usdc_volume": {
            "$ref": "#/definitions/Uint128"
          },
          "total_reward_tokens_distributed": {
            "$ref": "#/definitions/Uint128"
          },
          "vip_perks": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VipPerk"
            }
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "VipLevel": {
        "type": "string",
        "enum": [
          "level0",
          "level1",
          "level2",
          "level3"
        ]
      },
      "VipPerk": {
        "type": "object",
        "required": [
          "level_up_price_in_reward_tokens",
          "marketplace_fees_discount",
          "profile_background",
          "profile_description",
          "profile_links",
          "profile_nft_showcase",
          "vip_level"
        ],
        "properties": {
          "level_up_price_in_reward_tokens": {
            "$ref": "#/definitions/Uint128"
          },
          "marketplace_fees_discount": {
            "$ref": "#/definitions/Decimal"
          },
          "profile_background": {
            "type": "boolean"
          },
          "profile_description": {
            "type": "boolean"
          },
          "profile_links": {
            "type": "boolean"
          },
          "profile_nft_showcase": {
            "type": "boolean"
          },
          "vip_level": {
            "$ref": "#/definitions/VipLevel"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "remove_expired_sale"
        ],
        "properties": {
          "remove_expired_sale": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "required": [
              "list_of_updates"
            ],
            "properties": {
              "list_of_updates": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UpdateConfigEnum"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "claim_marketplace_fees"
        ],
        "properties": {
          "claim_marketplace_fees": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "add_new_collection"
        ],
        "properties": {
          "add_new_collection": {
            "type": "object",
            "required": [
              "nft_collection_address",
              "nft_contract_info"
            ],
            "properties": {
              "nft_collection_address": {
                "type": "string"
              },
              "nft_contract_info": {
                "$ref": "#/definitions/NftContractInfo"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "transfer_my_nft"
        ],
        "properties": {
          "transfer_my_nft": {
            "type": "object",
            "required": [
              "nft_collection_address",
              "recipient",
              "token_id"
            ],
            "properties": {
              "nft_collection_address": {
                "type": "string"
              },
              "recipient": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "sell_nft"
        ],
        "properties": {
          "sell_nft": {
            "type": "object",
            "required": [
              "sale_info"
            ],
            "properties": {
              "sale_info": {
                "$ref": "#/definitions/NftSale"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "cancel_sale"
        ],
        "properties": {
          "cancel_sale": {
            "type": "object",
            "required": [
              "nft_collection_address",
              "token_id"
            ],
            "properties": {
              "additional_info": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "nft_collection_address": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_sale"
        ],
        "properties": {
          "update_sale": {
            "type": "object",
            "required": [
              "sale_info"
            ],
            "properties": {
              "sale_info": {
                "$ref": "#/definitions/NftSale"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "buy_nft"
        ],
        "properties": {
          "buy_nft": {
            "type": "object",
            "required": [
              "nft_collection_address",
              "token_id"
            ],
            "properties": {
              "additional_info": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "nft_collection_address": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "offer"
        ],
        "properties": {
          "offer": {
            "type": "object",
            "required": [
              "offer"
            ],
            "properties": {
              "offer": {
                "$ref": "#/definitions/NftOffer"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "cancel_offer"
        ],
        "properties": {
          "cancel_offer": {
            "type": "object",
            "required": [
              "nft_collection_address",
              "token_id"
            ],
            "properties": {
              "additional_info": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "nft_collection_address": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "answer_offer"
        ],
        "properties": {
          "answer_offer": {
            "type": "object",
            "required": [
              "from",
              "if_accepted",
              "nft_collection_address",
              "token_id"
            ],
            "properties": {
              "answer_msg": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "from": {
                "type": "string"
              },
              "if_accepted": {
                "type": "boolean"
              },
              "nft_collection_address": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "create_my_profile"
        ],
        "properties": {
          "create_my_profile": {
            "type": "object",
            "properties": {
              "additional_info": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_my_profile"
        ],
        "properties": {
          "update_my_profile": {
            "type": "object",
            "required": [
              "profile",
              "profile_update_action"
            ],
            "properties": {
              "profile": {
                "$ref": "#/definitions/Profile"
              },
              "profile_update_action": {
                "$ref": "#/definitions/ProfileUpdateAction"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "send_message"
        ],
        "properties": {
          "send_message": {
            "type": "object",
            "required": [
              "message",
              "to"
            ],
            "properties": {
              "message": {
                "type": "string"
              },
              "to": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "receive"
        ],
        "properties": {
          "receive": {
            "$ref": "#/definitions/Cw20ReceiveMsg"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Cw20ReceiveMsg": {
        "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "amount",
          "msg",
          "sender"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "NftContractInfo": {
        "type": "object",
        "required": [
          "code_id",
          "nft_contract_type"
        ],
        "properties": {
          "code_id": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "nft_contract_type": {
            "$ref": "#/definitions/NftContractType"
          }
        },
        "additionalProperties": false
      },
      "NftContractType": {
        "type": "string",
        "enum": [
          "cw2981_multi_royalties",
          "cw721_on_chain_metadata",
          "cw2981_mad_huahua",
          "marketplace_info"
        ]
      },
      "NftOffer": {
        "type": "object",
        "required": [
          "nft_collection_address",
          "offer_expiration",
          "offer_price_denom",
          "offer_price_value",
          "offerer_address",
          "token_id"
        ],
        "properties": {
          "nft_collection_address": {
            "type": "string"
          },
          "offer_expiration": {
            "$ref": "#/definitions/Timestamp"
          },
          "offer_price_denom": {
            "type": "string"
          },
          "offer_price_value": {
            "$ref": "#/definitions/Uint128"
          },
          "offerer_address": {
            "type": "string"
          },
          "token_id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "NftSale": {
        "type": "object",
        "required": [
          "nft_collection_address",
          "sale_expiration",
          "sale_price_denom",
          "sale_price_value",
          "seller",
          "token_id"
        ],
        "properties": {
          "nft_collection_address": {
            "type": "string"
          },
          "sale_expiration": {
            "$ref": "#/definitions/Timestamp"
          },
          "sale_price_denom": {
            "type": "string"
          },
          "sale_price_value": {
            "$ref": "#/definitions/Uint128"
          },
          "seller": {
            "type": "string"
          },
          "token_id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "NftShowcase": {
        "type": "object",
        "required": [
          "collection",
          "token_id"
        ],
        "properties": {
          "collection": {
            "type": "string"
          },
          "token_id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Profile": {
        "type": "object",
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "background_nft_collection": {
            "type": [
              "string",
              "null"
            ]
          },
          "background_nft_token_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "buy_info": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/TradeInfo"
            }
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "display_trade_info": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "links": {
            "anyOf": [
              {
                "$ref": "#/definitions/Socials"
              },
              {
                "type": "null"
              }
            ]
          },
          "nft_showcase": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/NftShowcase"
            }
          },
          "number_of_trades": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "profile_messages": {
            "anyOf": [
              {
                "$ref": "#/definitions/ProfileMessages"
              },
              {
                "type": "null"
              }
            ]
          },
          "profile_nft_collection": {
            "type": [
              "string",
              "null"
            ]
          },
          "profile_nft_token_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "sell_info": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/TradeInfo"
            }
          },
          "username": {
            "type": [
              "string",
              "null"
            ]
          },
          "vip_level": {
            "anyOf": [
              {
                "$ref": "#/definitions/VipLevel"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ProfileMessage": {
        "type": "object",
        "required": [
          "from_address",
          "message"
        ],
        "properties": {
          "from_address": {
            "type": "string"
          },
          "from_username": {
            "type": [
              "string",
              "null"
            ]
          },
          "message": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ProfileMessages": {
        "type": "object",
        "required": [
          "display_on_profile",
          "messages"
        ],
        "properties": {
          "display_on_profile": {
            "type": "boolean"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ProfileMessage"
            }
          }
        },
        "additionalProperties": false
      },
      "ProfileUpdateAction": {
        "type": "string",
        "enum": [
          "add",
          "remove"
        ]
      },
      "RewardSystem": {
        "type": "object",
        "required": [
          "reward_token_address",
          "reward_token_per_1usdc_volume",
          "total_reward_tokens_distributed",
          "vip_perks"
        ],
        "properties": {
          "reward_token_address": {
            "type": "string"
          },
          "reward_token_per_1usdc_volume": {
            "$ref": "#/definitions/Uint128"
          },
          "total_reward_tokens_distributed": {
            "$ref": "#/definitions/Uint128"
          },
          "vip_perks": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VipPerk"
            }
          }
        },
        "additionalProperties": false
      },
      "Socials": {
        "type": "object",
        "properties": {
          "additional_social_link": {
            "type": [
              "string",
              "null"
            ]
          },
          "discord_link": {
            "type": [
              "string",
              "null"
            ]
          },
          "telegram_link": {
            "type": [
              "string",
              "null"
            ]
          },
          "twitter_link": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "TradeInfo": {
        "type": "object",
        "required": [
          "denom",
          "volume_value"
        ],
        "properties": {
          "denom": {
            "type": "string"
          },
          "volume_value": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      },
      "UpdateConfigEnum": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "enable_disable"
            ],
            "properties": {
              "enable_disable": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_accepted_nft_contracts"
            ],
            "properties": {
              "update_accepted_nft_contracts": {
                "type": "object",
                "required": [
                  "contracts"
                ],
                "properties": {
                  "contracts": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/NftContractInfo"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "add_denoms"
            ],
            "properties": {
              "add_denoms": {
                "type": "object",
                "required": [
                  "denoms"
                ],
                "properties": {
                  "denoms": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "remove_denoms"
            ],
            "properties": {
              "remove_denoms": {
                "type": "object",
                "required": [
                  "denoms"
                ],
                "properties": {
                  "denoms": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_owner"
            ],
            "properties": {
              "update_owner": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_reward_system"
            ],
            "properties": {
              "update_reward_system": {
                "type": "object",
                "required": [
                  "reward_system"
                ],
                "properties": {
                  "reward_system": {
                    "$ref": "#/definitions/RewardSystem"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "VipLevel": {
        "type": "string",
        "enum": [
          "level0",
          "level1",
          "level2",
          "level3"
        ]
      },
      "VipPerk": {
        "type": "object",
        "required": [
          "level_up_price_in_reward_tokens",
          "marketplace_fees_discount",
          "profile_background",
          "profile_description",
          "profile_links",
          "profile_nft_showcase",
          "vip_level"
        ],
        "properties": {
          "level_up_price_in_reward_tokens": {
            "$ref": "#/definitions/Uint128"
          },
          "marketplace_fees_discount": {
            "$ref": "#/definitions/Decimal"
          },
          "profile_background": {
            "type": "boolean"
          },
          "profile_description": {
            "type": "boolean"
          },
          "profile_links": {
            "type": "boolean"
          },
          "profile_nft_showcase": {
            "type": "boolean"
          },
          "vip_level": {
            "$ref": "#/definitions/VipLevel"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "get_config"
        ],
        "properties": {
          "get_config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_marketplace_volume"
        ],
        "properties": {
          "get_marketplace_volume": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_nft_collection_volume"
        ],
        "properties": {
          "get_nft_collection_volume": {
            "type": "object",
            "required": [
              "nft_collection_address"
            ],
            "properties": {
              "nft_collection_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_nft_collection_type"
        ],
        "properties": {
          "get_nft_collection_type": {
            "type": "object",
            "required": [
              "nft_collection_address"
            ],
            "properties": {
              "nft_collection_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_nft_collection_info"
        ],
        "properties": {
          "get_nft_collection_info": {
            "type": "object",
            "required": [
              "nft_collection_address"
            ],
            "properties": {
              "nft_collection_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_nft_for_sale_info"
        ],
        "properties": {
          "get_nft_for_sale_info": {
            "type": "object",
            "required": [
              "nft_collection_address",
              "token_id"
            ],
            "properties": {
              "nft_collection_address": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_seller_all_nfts_for_sale"
        ],
        "properties": {
          "get_seller_all_nfts_for_sale": {
            "type": "object",
            "required": [
              "seller_address"
            ],
            "properties": {
              "output_length": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "seller_address": {
                "type": "string"
              },
              "start_after_collection_token_id": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_all_tokens_by_coll_and_if_for_sale"
        ],
        "properties": {
          "get_all_tokens_by_coll_and_if_for_sale": {
            "type": "object",
            "required": [
              "address",
              "nft_collection_address"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "nft_collection_address": {
                "type": "string"
              },
              "output_length": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_collection_all_nfts_for_sale"
        ],
        "properties": {
          "get_collection_all_nfts_for_sale": {
            "type": "object",
            "required": [
              "nft_collection_address"
            ],
            "properties": {
              "nft_collection_address": {
                "type": "string"
              },
              "output_length": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after_token_id": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_marketplace_info"
        ],
        "properties": {
          "get_marketplace_info": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_token_id_sale_history"
        ],
        "properties": {
          "get_token_id_sale_history": {
            "type": "object",
            "required": [
              "nft_collection_address",
              "token_id"
            ],
            "properties": {
              "nft_collection_address": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_profile_info"
        ],
        "properties": {
          "get_profile_info": {
            "type": "object",
            "required": [
              "address_or_username"
            ],
            "properties": {
              "address_or_username": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_all_offers_token_id"
        ],
        "properties": {
          "get_all_offers_token_id": {
            "type": "object",
            "required": [
              "nft_collection_address",
              "token_id"
            ],
            "properties": {
              "nft_collection_address": {
                "type": "string"
              },
              "output_length": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "array",
                  "null"
                ],
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              },
              "token_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_all_offers_address"
        ],
        "properties": {
          "get_all_offers_address": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "output_length": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "array",
                  "null"
                ],
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_token_ids_by_collection"
        ],
        "properties": {
          "get_token_ids_by_collection": {
            "type": "object",
            "required": [
              "address",
              "list_of_collections"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "list_of_collections": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "get_all_offers_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_NftOffer",
      "type": "array",
      "items": {
        "$ref": "#/definitions/NftOffer"
      },
      "definitions": {
        "NftOffer": {
          "type": "object",
          "required": [
            "nft_collection_address",
            "offer_expiration",
            "offer_price_denom",
            "offer_price_value",
            "offerer_address",
            "token_id"
          ],
          "properties": {
            "nft_collection_address": {
              "type": "string"
            },
            "offer_expiration": {
              "$ref": "#/definitions/Timestamp"
            },
            "offer_price_denom": {
              "type": "string"
            },
            "offer_price_value": {
              "$ref": "#/definitions/Uint128"
            },
            "offerer_address": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_all_offers_token_id": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NftOffer",
      "type": "object",
      "required": [
        "nft_collection_address",
        "offer_expiration",
        "offer_price_denom",
        "offer_price_value",
        "offerer_address",
        "token_id"
      ],
      "properties": {
        "nft_collection_address": {
          "type": "string"
        },
        "offer_expiration": {
          "$ref": "#/definitions/Timestamp"
        },
        "offer_price_denom": {
          "type": "string"
        },
        "offer_price_value": {
          "$ref": "#/definitions/Uint128"
        },
        "offerer_address": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_all_tokens_by_coll_and_if_for_sale": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_NftSale",
      "type": "array",
      "items": {
        "$ref": "#/definitions/NftSale"
      },
      "definitions": {
        "NftSale": {
          "type": "object",
          "required": [
            "nft_collection_address",
            "sale_expiration",
            "sale_price_denom",
            "sale_price_value",
            "seller",
            "token_id"
          ],
          "properties": {
            "nft_collection_address": {
              "type": "string"
            },
            "sale_expiration": {
              "$ref": "#/definitions/Timestamp"
            },
            "sale_price_denom": {
              "type": "string"
            },
            "sale_price_value": {
              "$ref": "#/definitions/Uint128"
            },
            "seller": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_collection_all_nfts_for_sale": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_NftSale",
      "type": "array",
      "items": {
        "$ref": "#/definitions/NftSale"
      },
      "definitions": {
        "NftSale": {
          "type": "object",
          "required": [
            "nft_collection_address",
            "sale_expiration",
            "sale_price_denom",
            "sale_price_value",
            "seller",
            "token_id"
          ],
          "properties": {
            "nft_collection_address": {
              "type": "string"
            },
            "sale_expiration": {
              "$ref": "#/definitions/Timestamp"
            },
            "sale_price_denom": {
              "type": "string"
            },
            "sale_price_value": {
              "$ref": "#/definitions/Uint128"
            },
            "seller": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigRewardGenStatsMsg",
      "type": "object",
      "required": [
        "accepted_ibc_denominations",
        "contract_enabled",
        "contract_owner",
        "general_stats",
        "marketplace_listing_fee_denom",
        "marketplace_listing_fee_value",
        "marketplace_pct_fees",
        "oracle_contract_address",
        "reward_system"
      ],
      "properties": {
        "accepted_ibc_denominations": {
          "$ref": "#/definitions/AcceptedDenominations"
        },
        "contract_enabled": {
          "type": "boolean"
        },
        "contract_owner": {
          "type": "string"
        },
        "general_stats": {
          "$ref": "#/definitions/GeneralStats"
        },
        "marketplace_listing_fee_denom": {
          "type": "string"
        },
        "marketplace_listing_fee_value": {
          "$ref": "#/definitions/Uint128"
        },
        "marketplace_pct_fees": {
          "$ref": "#/definitions/Decimal"
        },
        "oracle_contract_address": {
          "type": "string"
        },
        "reward_system": {
          "$ref": "#/definitions/RewardSystem"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AcceptedDenominations": {
          "type": "object",
          "required": [
            "list_of_denoms"
          ],
          "properties": {
            "list_of_denoms": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "CollectionVolume": {
          "type": "object",
          "required": [
            "nft_collection_address",
            "usdc_volume"
          ],
          "properties": {
            "nft_collection_address": {
              "type": "string"
            },
            "usdc_volume": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "GeneralStats": {
          "type": "object",
          "required": [
            "last_collection_added",
            "last_collections_traded",
            "lowest_volume_usdc",
            "top_10_volume_usdc"
          ],
          "properties": {
            "last_collection_added": {
              "type": "string"
            },
            "last_collections_traded": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "lowest_volume_usdc": {
              "$ref": "#/definitions/Uint128"
            },
            "top_10_volume_usdc": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CollectionVolume"
              }
            }
          },
          "additionalProperties": false
        },
        "RewardSystem": {
          "type": "object",
          "required": [
            "reward_token_address",
            "reward_token_per_1usdc_volume",
            "total_reward_tokens_distributed",
            "vip_perks"
          ],
          "properties": {
            "reward_token_address": {
              "type": "string"
            },
            "reward_token_per_1usdc_volume": {
              "$ref": "#/definitions/Uint128"
            },
            "total_reward_tokens_distributed": {
              "$ref": "#/definitions/Uint128"
            },
            "vip_perks": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VipPerk"
              }
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "VipLevel": {
          "type": "string",
          "enum": [
            "level0",
            "level1",
            "level2",
            "level3"
          ]
        },
        "VipPerk": {
          "type": "object",
          "required": [
            "level_up_price_in_reward_tokens",
            "marketplace_fees_discount",
            "profile_background",
            "profile_description",
            "profile_links",
            "profile_nft_showcase",
            "vip_level"
          ],
          "properties": {
            "level_up_price_in_reward_tokens": {
              "$ref": "#/definitions/Uint128"
            },
            "marketplace_fees_discount": {
              "$ref": "#/definitions/Decimal"
            },
            "profile_background": {
              "type": "boolean"
            },
            "profile_description": {
              "type": "boolean"
            },
            "profile_links": {
              "type": "boolean"
            },
            "profile_nft_showcase": {
              "type": "boolean"
            },
            "vip_level": {
              "$ref": "#/definitions/VipLevel"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_marketplace_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_MarketplaceStatsByDenom",
      "type": "array",
      "items": {
        "$ref": "#/definitions/MarketplaceStatsByDenom"
      },
      "definitions": {
        "MarketplaceStatsByDenom": {
          "type": "object",
          "required": [
            "denom",
            "marketplace_fees_to_claim",
            "nfts_for_sale",
            "realized_sales_counter",
            "total_marketplace_fees",
            "total_realized_sales_volume"
          ],
          "properties": {
            "denom": {
              "type": "string"
            },
            "marketplace_fees_to_claim": {
              "$ref": "#/definitions/Uint128"
            },
            "nfts_for_sale": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "realized_sales_counter": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "total_marketplace_fees": {
              "$ref": "#/definitions/Uint128"
            },
            "total_realized_sales_volume": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_marketplace_volume": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "get_nft_collection_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NftCollectionInfoByDenom",
      "type": "object",
      "required": [
        "collection_name",
        "current_floor",
        "denom",
        "nft_collection_address",
        "nfts_for_sale",
        "realized_trades",
        "total_volume"
      ],
      "properties": {
        "collection_name": {
          "type": "string"
        },
        "current_floor": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        },
        "nft_collection_address": {
          "type": "string"
        },
        "nfts_for_sale": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "realized_trades": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "total_volume": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_nft_collection_type": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NftContractType",
      "type": "string",
      "enum": [
        "cw2981_multi_royalties",
        "cw721_on_chain_metadata",
        "cw2981_mad_huahua",
        "marketplace_info"
      ]
    },
    "get_nft_collection_volume": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "get_nft_for_sale_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NftSale",
      "type": "object",
      "required": [
        "nft_collection_address",
        "sale_expiration",
        "sale_price_denom",
        "sale_price_value",
        "seller",
        "token_id"
      ],
      "properties": {
        "nft_collection_address": {
          "type": "string"
        },
        "sale_expiration": {
          "$ref": "#/definitions/Timestamp"
        },
        "sale_price_denom": {
          "type": "string"
        },
        "sale_price_value": {
          "$ref": "#/definitions/Uint128"
        },
        "seller": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_profile_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Profile",
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "background_nft_collection": {
          "type": [
            "string",
            "null"
          ]
        },
        "background_nft_token_id": {
          "type": [
            "string",
            "null"
          ]
        },
        "buy_info": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/TradeInfo"
          }
        },
        "description": {
          "type": [
            "string",
            "null"
          ]
        },
        "display_trade_info": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "links": {
          "anyOf": [
            {
              "$ref": "#/definitions/Socials"
            },
            {
              "type": "null"
            }
          ]
        },
        "nft_showcase": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/NftShowcase"
          }
        },
        "number_of_trades": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "profile_messages": {
          "anyOf": [
            {
              "$ref": "#/definitions/ProfileMessages"
            },
            {
              "type": "null"
            }
          ]
        },
        "profile_nft_collection": {
          "type": [
            "string",
            "null"
          ]
        },
        "profile_nft_token_id": {
          "type": [
            "string",
            "null"
          ]
        },
        "sell_info": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/TradeInfo"
          }
        },
        "username": {
          "type": [
            "string",
            "null"
          ]
        },
        "vip_level": {
          "anyOf": [
            {
              "$ref": "#/definitions/VipLevel"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "NftShowcase": {
          "type": "object",
          "required": [
            "collection",
            "token_id"
          ],
          "properties": {
            "collection": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "ProfileMessage": {
          "type": "object",
          "required": [
            "from_address",
            "message"
          ],
          "properties": {
            "from_address": {
              "type": "string"
            },
            "from_username": {
              "type": [
                "string",
                "null"
              ]
            },
            "message": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "ProfileMessages": {
          "type": "object",
          "required": [
            "display_on_profile",
            "messages"
          ],
          "properties": {
            "display_on_profile": {
              "type": "boolean"
            },
            "messages": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProfileMessage"
              }
            }
          },
          "additionalProperties": false
        },
        "Socials": {
          "type": "object",
          "properties": {
            "additional_social_link": {
              "type": [
                "string",
                "null"
              ]
            },
            "discord_link": {
              "type": [
                "string",
                "null"
              ]
            },
            "telegram_link": {
              "type": [
                "string",
                "null"
              ]
            },
            "twitter_link": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "TradeInfo": {
          "type": "object",
          "required": [
            "denom",
            "volume_value"
          ],
          "properties": {
            "denom": {
              "type": "string"
            },
            "volume_value": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "VipLevel": {
          "type": "string",
          "enum": [
            "level0",
            "level1",
            "level2",
            "level3"
          ]
        }
      }
    },
    "get_seller_all_nfts_for_sale": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_NftSale",
      "type": "array",
      "items": {
        "$ref": "#/definitions/NftSale"
      },
      "definitions": {
        "NftSale": {
          "type": "object",
          "required": [
            "nft_collection_address",
            "sale_expiration",
            "sale_price_denom",
            "sale_price_value",
            "seller",
            "token_id"
          ],
          "properties": {
            "nft_collection_address": {
              "type": "string"
            },
            "sale_expiration": {
              "$ref": "#/definitions/Timestamp"
            },
            "sale_price_denom": {
              "type": "string"
            },
            "sale_price_value": {
              "$ref": "#/definitions/Uint128"
            },
            "seller": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_token_id_sale_history": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_TokenSaleHistory",
      "type": "array",
      "items": {
        "$ref": "#/definitions/TokenSaleHistory"
      },
      "definitions": {
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "TokenSaleHistory": {
          "type": "object",
          "required": [
            "buyer",
            "nft_collection_address",
            "sale_price_denom",
            "sale_price_value",
            "sale_time",
            "seller",
            "token_id"
          ],
          "properties": {
            "buyer": {
              "type": "string"
            },
            "nft_collection_address": {
              "type": "string"
            },
            "sale_price_denom": {
              "type": "string"
            },
            "sale_price_value": {
              "$ref": "#/definitions/Uint128"
            },
            "sale_time": {
              "$ref": "#/definitions/Timestamp"
            },
            "seller": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_token_ids_by_collection": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_String",
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  }
}
