{
  "contract_name": "oracle",
  "contract_version": "0.0.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "accepted_ibc_denoms",
      "contract_owner",
      "max_history_length",
      "prices_feeder"
    ],
    "properties": {
      "accepted_ibc_denoms": {
        "$ref": "#/definitions/AcceptedDenominations"
      },
      "contract_owner": {
        "type": "string"
      },
      "max_history_length": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      },
      "prices_feeder": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "AcceptedDenominations": {
        "type": "object",
        "required": [
          "list_of_denoms"
        ],
        "properties": {
          "list_of_denoms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "required": [
              "list_of_updates"
            ],
            "properties": {
              "list_of_updates": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UpdateConfigEnum"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "feed_prices"
        ],
        "properties": {
          "feed_prices": {
            "type": "object",
            "required": [
              "prices"
            ],
            "properties": {
              "prices": {
                "$ref": "#/definitions/OraclePrices"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "OraclePrice": {
        "type": "object",
        "required": [
          "ibc_denom",
          "name",
          "ticker",
          "value_usdc_6_decimals"
        ],
        "properties": {
          "ibc_denom": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ticker": {
            "type": "string"
          },
          "value_usdc_6_decimals": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "OraclePrices": {
        "type": "object",
        "required": [
          "at_time",
          "prices"
        ],
        "properties": {
          "at_time": {
            "$ref": "#/definitions/Timestamp"
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OraclePrice"
            }
          }
        },
        "additionalProperties": false
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      },
      "UpdateConfigEnum": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "change_max_length"
            ],
            "properties": {
              "change_max_length": {
                "type": "object",
                "required": [
                  "length"
                ],
                "properties": {
                  "length": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_owner"
            ],
            "properties": {
              "update_owner": {
                "type": "object",
                "required": [
                  "new_owner"
                ],
                "properties": {
                  "new_owner": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "change_price_feeder"
            ],
            "properties": {
              "change_price_feeder": {
                "type": "object",
                "required": [
                  "new_feeder"
                ],
                "properties": {
                  "new_feeder": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "add_denoms"
            ],
            "properties": {
              "add_denoms": {
                "type": "object",
                "required": [
                  "denoms"
                ],
                "properties": {
                  "denoms": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "remove_denoms"
            ],
            "properties": {
              "remove_denoms": {
                "type": "object",
                "required": [
                  "denoms"
                ],
                "properties": {
                  "denoms": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "get_config_and_current_prices"
        ],
        "properties": {
          "get_config_and_current_prices": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_usdc_price_from_amount_and_denom"
        ],
        "properties": {
          "get_usdc_price_from_amount_and_denom": {
            "type": "object",
            "required": [
              "amount",
              "denom"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_latest_historical_prices"
        ],
        "properties": {
          "get_latest_historical_prices": {
            "type": "object",
            "properties": {
              "length": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "get_config_and_current_prices": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "accepted_ibc_denoms",
        "contract_owner",
        "current_prices",
        "max_history_length",
        "next_history_id",
        "oldest_history_id",
        "prices_feeder"
      ],
      "properties": {
        "accepted_ibc_denoms": {
          "$ref": "#/definitions/AcceptedDenominations"
        },
        "contract_owner": {
          "type": "string"
        },
        "current_prices": {
          "$ref": "#/definitions/OraclePrices"
        },
        "max_history_length": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "next_history_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "oldest_history_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "prices_feeder": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AcceptedDenominations": {
          "type": "object",
          "required": [
            "list_of_denoms"
          ],
          "properties": {
            "list_of_denoms": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "OraclePrice": {
          "type": "object",
          "required": [
            "ibc_denom",
            "name",
            "ticker",
            "value_usdc_6_decimals"
          ],
          "properties": {
            "ibc_denom": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "ticker": {
              "type": "string"
            },
            "value_usdc_6_decimals": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "OraclePrices": {
          "type": "object",
          "required": [
            "at_time",
            "prices"
          ],
          "properties": {
            "at_time": {
              "$ref": "#/definitions/Timestamp"
            },
            "prices": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OraclePrice"
              }
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_latest_historical_prices": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Tuple_of_uint64_and_OraclePrices",
      "type": "array",
      "items": {
        "type": "array",
        "items": [
          {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          {
            "$ref": "#/definitions/OraclePrices"
          }
        ],
        "maxItems": 2,
        "minItems": 2
      },
      "definitions": {
        "OraclePrice": {
          "type": "object",
          "required": [
            "ibc_denom",
            "name",
            "ticker",
            "value_usdc_6_decimals"
          ],
          "properties": {
            "ibc_denom": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "ticker": {
              "type": "string"
            },
            "value_usdc_6_decimals": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "OraclePrices": {
          "type": "object",
          "required": [
            "at_time",
            "prices"
          ],
          "properties": {
            "at_time": {
              "$ref": "#/definitions/Timestamp"
            },
            "prices": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OraclePrice"
              }
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_usdc_price_from_amount_and_denom": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
